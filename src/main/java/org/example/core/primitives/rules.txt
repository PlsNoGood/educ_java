
Конструкция if-else в Java является фундаментальной частью управления потоком выполнения программы.
Она позволяет выполнять различные блоки кода в зависимости от того, истинно или ложно выражение, указанное в условии if.

Синтаксис
Основной синтаксис конструкции if-else выглядит следующим образом:

if (условие) {
    // Блок кода, который выполняется, если условие истинно
} else {
    // Блок кода, который выполняется, если условие ложно
}

Пример

int number = 10;

if (number > 0) {
    System.out.println("Число положительное");
} else {
    System.out.println("Число не положительное");
}
В этом примере, если переменная number больше нуля, то на консоль выводится сообщение "Число положительное".
Если number меньше или равно нулю, выводится "Число не положительное".

Расширенный синтаксис с else if
Часто возникает необходимость проверить несколько условий последовательно.
Для этого можно использовать else if. Это позволяет добавить дополнительные условные проверки.

if (условие1) {
    // Код выполняется, если условие1 истинно
} else if (условие2) {
    // Код выполняется, если условие1 ложно, но условие2 истинно
} else {
    // Код выполняется, если и условие1, и условие2 ложны
}
Пример с else if

int score = 75;

if (score >= 90) {
    System.out.println("Отлично!");
} else if (score >= 70) {
    System.out.println("Хорошо!");
} else if (score >= 50) {
    System.out.println("Удовлетворительно");
} else {
    System.out.println("Неудовлетворительно");
}
В этом примере проверяются разные диапазоны значений переменной score. В зависимости от значения score выводится соответствующее сообщение.

Важные замечания
Условие в if должно быть булевым выражением (true или false).
Блок кода в if или else может содержать любое количество операторов, включая другие конструкции if-else.
else if и else являются необязательными, можно использовать только if, если требуется проверить только одно условие.
Конструкция if-else является мощным инструментом для реализации разветвленного поведения в программе и помогает обрабатывать различные сценарии выполнения кода.